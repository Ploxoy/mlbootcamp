plot(cars)
source('G:/Projects/mlbootcamp/sandbox_train/main.R', encoding = 'UTF-8')
source('G:/Projects/mlbootcamp/sandbox_train/main.R', encoding = 'UTF-8')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
XL
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
XL
XL[35]
XL[35,]
XL[35,V4]
XL[35,'V4']
XL[35,]
XL[35,14]
XL[35,]
data.frame
data.frame(XL)
clear()
XL[35,]
XL[35,$V1]
XL[35,]$V10
XL[35,]$V15
XL[35,]$V15
XL[35,]$V10
XL[35,]$V1
XL[35,]$V14
help(unclass)
class(c(1,2,3))
unclass(c(1,2,3))
unclass(c(1,2,4))
class(x)
class(4)
class(77)
class(77) <- 78
unclass(77)
unclass(76)
oldClass(77)
unclass(XL)
as.matrix(XL)
A = as.matrix(XL)
A[1,2]
as.matrix.default(XL)
as.matrix(1:10)
data.matrix(XL)
XL[34,]
XL
XL[57,]
data.matrix(XL)[57,]
XL[57,]$V14
XL$V2
XL == '?'
is.na(XL)
is.na<-
1
1
is.na
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
idx = XL == " ?"
XL[34,]
XL[57,]
is.na(XL) <- idx
XL
XL[57,]
gsub
A = matrix(1:6, 2, 3)
A
A[2,2] = 55
idx = A == 55
idx
is.na<-idx
A
is.na
View(is.na)
View(is.na)
A = matrix(1:6, 2, 3)
A[2,2] = 55
idx = A == 55
idx
is.na(A)<-
1
A
is.na(A)=idx
A
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
is.na(XL)<- XL == '?'
XL[57,]
data.matrix(XL)[57,]
XL[57,]
XL$V2
view(XL$V2)
View(is.na)
View(XL$V2)
is.na
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
is.na
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
A[57,]
XL[57,]
R
R = XL$V2
S
S = A[,2]
View(XL)
View(A)
View(XL)
View(XL)
max(A[,2])
A[,2]
max(A[,2])
which(A[,2] != NA)
is.na(A[,2])
A[,2][is.na(A[,2])]
A[,2][-is.na(A[,2])]
max(A[,2][-is.na(A[,2])])
A[,2][-is.na(A[,2])]
A[-is.na(A[,2]), 2]
-is.na(A[,2])
!is.na(A[,2])
A[!is.na(A[,2]), 2]
max(A[!is.na(A[,2]), 2])
min(A[!is.na(A[,2]), 2])
XL[15,]
data.matrix(XL[15,])
samp.frame <- data.frame(a = 1:10, b = c(3,2,5,3,1,5,NA,4,5,NA))
samp.frame
str(samp.frame)
samp.matrix <- data.matrix(samp.frame)
str(samp.matrix)
samp.matrix
str(XL)
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
unname(XL)
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
data.matrix(XX)
YY
cbind(data.matrix(XX), YY)
unname(cbind(data.matrix(XX), YY))
View(XL)
XL[1,]
XL[2,]
XL[3,]
XL == NA
is.na(XL)
XL[is.na(XL)]
XL[is.na(XL)] = 55
XL
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
any(is.na(XL))
is.na(c(1,2,3))
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
tmp
matrix(NA, 2, 3)
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
tmp
rbind(tmp, XL[1,])
rbind(tmp, XL[1:3,])
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
tmp
rbind(tmp, XL[5,])
as.matrix(XL[5,])
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
tmp
nrow(tmp)
nrow(XL)
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
a = 5
a++
1
a += 1
source('G:/Projects/mlbootcamp/sandbox_train/algos.R', encoding = 'UTF-8')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
v
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
debugSource('G:/Projects/mlbootcamp/sandbox_train/algos.R', encoding = 'UTF-8')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
XL
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
toMatrix = function(XL) {
n = nrow(XL)
m = ncol(XL)
if (is.null(n)) {
n = length(XL)
res = matrix(NA, 1, n)
for(i in 1:n)
res[1,i] = XL[i]
return( res )
}
res = matrix(NA, n, m)
if (n == 0)
return( res )
for(i in 1:n)
for(j in 1:m)
res[i, j] = XL[i, j]
return( res )
}
A = matrix(1:6, 2, 3)
A
A[1,]
A[c(1),]
A[c(1,2),]
A[1,]
as.matrix(A[1,])
A[[1,]]
A[1,]
A[,1]
A[1,]
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
str = "1\n2\n3\n"
str
cat('123')
cat('123\n3434')
c(1,2,3)
cat(c(1,2,3))
cat(pastr0(c(1,2,3)))
paste0(c(1,2,3))
write(c(1,2,3), file="res.txt", sep='\n')
A = c(1,NA,2)
A
A[is.na(A)] = 5
A
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
write(results, file="res.txt", sep='\n')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
1-с(1,0,1)
с(1,0,1)
с(1,0,1)
1-c(1,0,1)
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
ttt = results
toMatrix(c(1,2,3))
as.matrix(c(1,2,3))
a = matrix(1:6, 2, 3)
a
a[1,]
data.matrix(a[1,])
as(a[1,])
as.matrix(a[1,])
a[[1[],])
a[[1[],]
.
a[1]
a[1,]
a[[1],]
a[[1,]]
a[,1]
a[,list(1)]
list(1)
a[list(1),]
a[1,]
row(a[1,])
a[1,]
row(a[1,])
row(a)
a
a==a
a[row(a)==1]
a[row(a)<3]
row(a)<3
a[row(a)<3]
a
a[1,]
a[1,,drop=F]
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
tmp != results
ttt != results
any(ttt != results)
c(1,1,2,2,2,3)
as.table(c(1,1,2,2,2,3))
table(c(1,1,2,2,2,3))
tbl = table(c(1,1,2,2,2,3))
tbl[1]
tbl[2]
tbl[3]
tbl[1:3]
sort(tbl)
sort(tbl,decreasing=T)
sort(tbl,decreasing=T)[1:1]
names(sort(tbl,decreasing=T))
tail(sort(tbl,decreasing=T))
sort(tbl,decreasing=T)[1]
name(sort(tbl,decreasing=T)[1])
rownames(sort(tbl,decreasing=T)[1])
colnames(sort(tbl,decreasing=T)[1])
sort(tbl,decreasing=T)
names(sort(tbl,decreasing=T))
names(sort(tbl,decreasing=T))[0]
names(sort(tbl,decreasing=T))[]
names(sort(tbl,decreasing=T))[1]
as.integer(names(sort(tbl,decreasing=T))[1])
as.integer(names(sort(table(c(1,2,3,4,5,3)),decreasing=T))[1])
countMax = function(x) {
as.integer(names(sort(table(x),decreasing=T))[1])
}
countMax(c(T,F,F))
table(c(T,F,F))
a = table(c(T,F,F))
colnames(a)
a
a[[1]]
a[,1]
a[1,]
a
c(a)
colnames(a)
a = table(c(T,F,F))
colnames(table(c(1,2,3,4,5)))
a
a[[1,]]
a[[1,2]]
typeof(1)
typeof(1.0)
typeof('a')
typeof('aert')
countMax = function(x) {
as.integer(names(sort(table(x),decreasing=T))[1])
}
countMax(c(1,2,3,4,33))
countMax(c(1,2,3,4,3))
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
ttt != results
count(ttt != results)
sum(ttt != results)
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
count
apply(c(1,2,3), function(x) x*x)
apply(c(1,2,3), function(x) { x*x })
apply(c(1,2,3), function(x) { x*x })
apply(c(1,2,3), 0, function(x) x*x)
lapply(c(1,2,3), function(x) x*x)
c(lapply(c(1,2,3), function(x) x*x))
lapply(c(1,2,3), function(x) x*x)
as.vector(lapply(c(1,2,3), function(x) x*x))
sapply(c(1,2,3), function(x) x*x)
sapply(list(1,2,3), function(x) x*x)
source('G:/Projects/mlbootcamp/sandbox_train/algos.R', encoding = 'UTF-8')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
baseAlgos
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
ttt = results
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
c(T, NA, F)
c(T, NA, F) == T
c(T, NA, F) == NA
c(T, NA, F) == T
which(c(T, NA, F))
which(!c(T, NA, F))
which(is.na(T, NA, F))
which(is.na(c(T, NA, F)))
na
countMax(c())
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
XXX = read.csv(file='crx_data_test_x.csv', head=F, sep=',', na.strings = '?')
XXX = data.matrix(XXX)
results = c()
for (i in 1:nrow(XXX)) {
x = XXX[i,]
#x[is.na(x)] = 0
results = c(results, treeClassifier(x))
}
write(1-results, file='res.txt', sep='\n')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
return( NA )
debugSource('G:/Projects/mlbootcamp/sandbox_train/main.R')
j
xx
xx[j]
is.na(xx[j])
debugSource('G:/Projects/mlbootcamp/sandbox_train/main.R')
xx[j]
xx
tree
debugSource('G:/Projects/mlbootcamp/sandbox_train/algos.R', encoding = 'UTF-8')
debugSource('G:/Projects/mlbootcamp/sandbox_train/algos.R', encoding = 'UTF-8')
debugSource('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R', echo=TRUE)
source('G:/Projects/mlbootcamp/sandbox_train/main.R', echo=TRUE)
debugSource('G:/Projects/mlbootcamp/sandbox_train/algos.R', encoding = 'UTF-8')
debugSource('G:/Projects/mlbootcamp/sandbox_train/algos.R', encoding = 'UTF-8')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
tree
tree[[4]]
tree[[4]]
tree[[4]]
tree[[4]]
tree[[4]]
tree[[4]]
tree[[4]]
tree[[4]]
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
sum(c(T,T))
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
debugSource('G:/Projects/mlbootcamp/sandbox_train/main.R')
x
is.nan(x)
is.nan(x)
as.vector(x)
is.na(x)
sum(is.na(x))
source('G:/Projects/mlbootcamp/sandbox_train/main.R')
source('G:/Projects/mlbootcamp/sandbox_train/main.R', encoding = 'UTF-8')
source('G:/Projects/mlbootcamp/sandbox_train/main.R', encoding = 'UTF-8')
debugSource('G:/Projects/mlbootcamp/sandbox_train/main.R', encoding = 'UTF-8')
XL
debugSource('G:/Projects/mlbootcamp/sandbox_train/main.R', encoding = 'UTF-8')
source('G:/Projects/mlbootcamp/sandbox_train/main.R', encoding = 'UTF-8')
source('G:/Projects/mlbootcamp/sandbox_train/main.R', encoding = 'UTF-8')
source('G:/Projects/mlbootcamp/sandbox_train/main.R', encoding = 'UTF-8')
source('G:/Projects/mlbootcamp/sandbox_train/main.R', encoding = 'UTF-8')
tmp
source('G:/Projects/mlbootcamp/sandbox_train/main.R', encoding = 'UTF-8')
source('G:/Projects/mlbootcamp/sandbox_train/main.R', encoding = 'UTF-8')
source('G:/Projects/mlbootcamp/sandbox_train/main.R', encoding = 'UTF-8')
XL
tmp = matrix(NA, 0, ncol(XL))
for (i in 1:nrow(XL)) {
if (!any(is.na(XL[i,])))
tmp = rbind(tmp, as.matrix(XL[i,]))
else
print(paste0('??? ', XL[i, ncol(XL)]))
}
tmp
data.matrix(cbind(XX, YY))
as.matrix(data.matrix(cbind(XX, YY)))
source('G:/Projects/mlbootcamp/sandbox_train/main.R', encoding = 'UTF-8')
XL
source('G:/Projects/mlbootcamp/sandbox_train/main.R', encoding = 'UTF-8')
XL
XX = read.csv(file="crx_data_train_x.csv", head=F, sep=",", na.strings = "?")
YY = read.csv(file="crx_data_train_y.csv", head=F, sep=",", na.strings = "?")
XL = unname(cbind(data.matrix(XX), YY))
colnames(XL)
XL[1:2,]
XL = unname(cbind(data.matrix(XX), YY))
XL
as.matrix(XL)
source('G:/Projects/mlbootcamp/sandbox_train/main.R', encoding = 'UTF-8')
source('G:/Projects/mlbootcamp/sandbox_train/main.R', encoding = 'UTF-8')
i
XL
XL[i, m]
XL[i,-m]
b(XL[i,-m])
b
0
c(1)[[1]]
error
weight
weight[i]
source('G:/Projects/mlbootcamp/sandbox_train/main.R', encoding = 'UTF-8')
test
c()
countMax(c())
length(countMax(c()))
source('G:/Projects/mlbootcamp/sandbox_train/main.R', encoding = 'UTF-8')
nas
source('G:/Projects/mlbootcamp/sandbox_train/main.R', encoding = 'UTF-8')
source('G:/Projects/mlbootcamp/sandbox_train/main.R', encoding = 'UTF-8')
source('G:/Projects/mlbootcamp/sandbox_train/main.R', encoding = 'UTF-8')
source('G:/Projects/mlbootcamp/sandbox_train/main.R', encoding = 'UTF-8')
source('G:/Projects/mlbootcamp/sandbox_train/main.R', encoding = 'UTF-8')
source('G:/Projects/mlbootcamp/sandbox_train/main.R', encoding = 'UTF-8')
source('G:/Projects/mlbootcamp/sandbox_train/main.R', encoding = 'UTF-8')
source('G:/Projects/mlbootcamp/sandbox_train/main.R', encoding = 'UTF-8')
source('G:/Projects/mlbootcamp/sandbox_train/main.R', encoding = 'UTF-8')
source('G:/Projects/mlbootcamp/sandbox_train/main.R', encoding = 'UTF-8')
source('G:/Projects/mlbootcamp/sandbox_train/main.R', encoding = 'UTF-8')
source('G:/Projects/mlbootcamp/sandbox_train/main.R', encoding = 'UTF-8')
source('G:/Projects/mlbootcamp/sandbox_train/main.R', encoding = 'UTF-8')
source('G:/Projects/mlbootcamp/sandbox_train/main.R', encoding = 'UTF-8')
